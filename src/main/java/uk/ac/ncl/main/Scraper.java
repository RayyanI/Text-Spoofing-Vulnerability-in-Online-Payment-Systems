package uk.ac.ncl.main;

import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.common.collect.ImmutableMap;
/**
 * Uses the Java Selenium Framework to fetch a list of trusted banking numbers with automation and regular expressions
 * @author Rayyan Iqbal
 * @version 1.03
 * @date Last updated 25/04/2020
 */
/**
 * @author Rayyan
 *
 */
public class Scraper {
	
	/* Class Variables */
	private static String DRIVER_PATH = "resources/chromedriver.exe";
	private static String DRIVER_TYPE = "webdriver.chrome.driver";
	private static String SEARCH_ENGINE = "https://google.co.uk";
	public static String UK_MOBILE_REGEX = "(?:(?:(?:\\+|00)44[\\s\\-\\.]?)?(?:(?:\\(?0\\)?)[\\s\\-\\.]?)?(?:\\d[\\s\\-\\.]?){10})|(?=\\(?\\d*\\)?[\\x20\\-\\d]*)(\\(?\\)?\\x20*\\-*\\d){11}";
	private static int UK_PHONE_LENGTH = 13; // +447983625085
	private static Map<String, URL> BANKS;
	private List<String> scrapedNumbers = new ArrayList<String>();
	private WebDriver driver;
	/* End Class Variables */
	
	
	/**
	 * Constructor Method - Creates a scraper instance to find the trusted numbers for a given bank	
	 * @param bankName - Name of the bank to perform the scraping
	 * @return Scraper instance
	 * @throws MalformedURLException 
	 */
	public Scraper (String bankName) throws MalformedURLException {
		
		// If this is first scraping instance //
		if ( BANKS == null) {
			try {
				// Create map of bank names with their associated web links //
				BANKS = ImmutableMap.of(
						"HSBC", new URL("https://hsbc.co.uk/"),
						"Barclays", new URL("https://barclays.co.uk/"),
						"Royal Bank of Scotland", new URL("https://rbs.co.uk"),
						"Lloyds", new URL("https://lloydsbank.com/"),
						"Natwest", new URL("https://natwest.com/"));
			} catch (MalformedURLException e) {
				throw new MalformedURLException("An error has occured when generating the URL map, please restart");
			}
		}

		
		
		
	}
	/**
	 * @return the scrapedNumbers
	 */
	public List<String> getScrapedNumbers() {
		return scrapedNumbers;
	}
	/**
	 * 
	 * Fetch the list of trusted numbers from a given banks website using the Selenium Automation Framework
	 * @param bankName - Name of the bank to perform the scraping
	 * @throws MalformedURLException 
	 * @note Results are subsequently stored in the trustedNumbers variable (no duplicates)
	 */
	public void fetchTrustedNumbers(String bankName) throws MalformedURLException {
		URL siteToScrape = BANKS.get(bankName);
		
		
		/* Setup Selenium Chrome driver */
		System.setProperty (DRIVER_TYPE, DRIVER_PATH);
		if ( DRIVER_TYPE.contains("chrome") ) {
			driver = new ChromeDriver();
		}
		
		
		// Load search engine //
		driver.get (SEARCH_ENGINE);
		WebDriverWait wait = new WebDriverWait (driver, 30);
		// Asynchronously wait for the web content to fully load //
	    wait.until(new ExpectedCondition<Boolean>() {
	        public Boolean apply(WebDriver wdriver) {
	            return ((JavascriptExecutor) driver).executeScript(
	                "return document.readyState"
	            ).equals("complete");
	        }
	    });
	    WebElement queryElement = driver.findElement(By.cssSelector("input[type='text'")); // search query web element
	    queryElement.sendKeys ( generateQuery(bankName));
	    queryElement.submit();
	    // Store list of query results //
	    List<WebElement> results = driver.findElements(By.xpath("//div[@class='rc']/div[@class='r']//a[(descendant::div)]"));
	    
	    // Parse each query element from the results into a usable URL format //
		List<URL> urlList = new ArrayList<URL>();
	    for (WebElement webElement : results) {
	    	try {
				urlList.add(new URL(webElement.getAttribute("href"))); // Store the redirect path of each result
			} catch (MalformedURLException e) {
				throw new MalformedURLException ("An error has occured when parsing the query results");
			}
		}
	    
	    
	    
	    // Parse each result from the results list for the trusted numbers //
	    Pattern p = Pattern.compile(UK_MOBILE_REGEX); // Setup regular expression handler 
	    for (URL url : urlList) {
			driver.get ( url.toExternalForm() ); 
			/* Wait for web content to finish loading */
		    wait.until(new ExpectedCondition<Boolean>() {
		        public Boolean apply(WebDriver wdriver) {
		            return ((JavascriptExecutor) driver).executeScript(
		                "return document.readyState"
		            ).equals("complete");
		        }
		    });
			Matcher m = p.matcher (driver.getPageSource() );  
			String match;
			while (m.find()) {
				// Remove any brackets and whitespace from matched string //
				match = m.group();
				match.replaceAll("\\s+","");
				match.replaceAll("[\\[\\](){}]", "");
				
				/* If the match: (1) has a + prefix (2) is of the appropriate length 
				     (3) and is not already in the set of numbers */
				if (match.contains("+") 
					&& match.length() == UK_PHONE_LENGTH
					&& !scrapedNumbers.contains(match))
				{
					DateFormat dateFormat = new SimpleDateFormat("[HH:mm:ss]: ");
					Date date = new Date();
					App.log.append(dateFormat.format(date));
					App.log.append("Number located:" + m.group() + "\n");
					scrapedNumbers.add(m.group());
					System.out.println(match);
				}
			}
		}
	    API.scrapedNumbers = scrapedNumbers;
	}
	
	
	/**
	 * Generates an appropriate search engine query string to locate the web resources containing the list of trusted numbers
	 * @param bank - URL object of the bank which to generate query
	 * @return queryString - Formatted query string used for a search engine
	 */
	public String generateQuery(String bankName) {
		if (bankName.equals("Natwest"))
			return bankName + " Reply Y Text Message";
		URL url = BANKS.get(bankName);
		return "site:" + url.getAuthority() + " " + bankName + " Reply Yes";
	}

}
