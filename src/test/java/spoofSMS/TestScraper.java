package spoofSMS;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import junit.framework.Assert;
import uk.ac.ncl.main.Scraper;

public class TestScraper {
	private Scraper scraper;
	@Before
	public void setUp() throws Exception {
		scraper = new Scraper("Natwest");
	}
	
	@Test
	public void testGenerateQuery() {
	}
}
	/**
	 * setupBeforeClass is ran first and can be used to handle expensive computations
	 * afterClass will execute after all of the test methods are executed in the class (releasing expensive resources)
	 * @Before methods will execute before each test i.e. setUp()
	 * @After methods which execute after each test release resources from a before method
	 * @Test self explanatory
	 * @Assertions assertThat(actual, is(equalTo(expected))
	 *			  assertThat(actual, is(not(equalTo(expected))
	 * assertThat("hello world", anyOf(is("hello world"), containsString("hello"))); In this case, the test will pass if either the actual string is “hello world” or if it contains the word “hello”.
	 *
	 * Testing Exceptions
	 * @Test (expected = Exception.class)
	 * public void testMe() throws Exception {
	 * }
	 * 
	 * OR
	 * try {
	 * 		blockOfCode
	 * } catch (IOException e) {
	 * 	assertThat(e.getMessage(), is("test.txt (No such file or directory)"));
	 * }
	 *  @Rule
    public ExpectedException thrown = ExpectedException.none();

    @Test
    public void testReadFile3() throws IOException {
                
        thrown.expect(IOException.class);
        thrown.expectMessage(startsWith("test.txt (No such file or directory)"));
        FileReader reader = new FileReader("test.txt");
        reader.read();
        reader.close();
    }
    *  Parameterized Tests
    *  If you ever need to test a single method with several different test data or inputs
    *  
    
	 */
	
